?Question
?question
?Question
?question
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(data.table)
library(tidyverse)
library(ggpubr)
library(compareGroups)
library(DT)
library(plotly)
CCLE_Signatures <- fread("CCLE_Signature.csv")
Differentation_State <- fread("Differentiation_JM.csv", header = TRUE)
exp <- fread("./CCLE_expression.csv") %>% select(`GPX2 (2877)`,V1)
Sig_Diff <- inner_join(Differentation_State, y=CCLE_Signatures, by = c("Cell_Line" = "CCLE")) %>% inner_join(y=exp, by = c("depMapID" = "V1"))
facet(ggboxplot(data = melt(dplyr::filter(Sig_Diff, MSI_MSS == "MSI" & Grade != "WD"), id.vars = c(1:9), measure.vars = 10:40), x = "Grade", y = "value", add = "dotplot") + stat_compare_means(label.x.npc = "centre", vjust = 3), facet.by = "variable", scales = "free_y", ncol = 2)
facet(ggscatter(data = melt(dplyr::filter(Sig_Diff, MSI_MSS == "MSI"), id.vars = c(1:9, 40), measure.vars = 10:39), x = "GPX2 (2877)", y = "value", add = "reg.line", shape = "Grade", cor.coef = TRUE, cor.method = "spearman"),  facet.by = "variable", scales = "free_y", ncol=2)
facet(ggboxplot(data = melt(dplyr::filter(Sig_Diff, MSI_MSS == "MSS" & Grade != "WD"), id.vars = c(1:9), measure.vars = 10:40), x = "Grade", y = "value", add = "dotplot") + stat_compare_means(label.x.npc = "centre", vjust = 3) , facet.by = "variable", scales = "free_y", ncol=2)
facet(ggscatter(data = melt(dplyr::filter(Sig_Diff, MSI_MSS == "MSS"), id.vars = c(1:9, 40), measure.vars = 10:39), x = "GPX2 (2877)", y = "value", add = "reg.line", shape = "Grade", cor.coef = TRUE, cor.method = "spearman"), facet.by = "variable", scales = "free_y", ncol=2)
ggboxplot(Sig_Diff, x="Grade", y="GPX2 (2877)", facet.by = "MSI_MSS")
ggboxplot(Sig_Diff, x="Grade", y="GPX2 (2877)")
dev.off()
CCLE_Maf <- fread("CCLE_mutations.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(data.table)
library(tidyverse)
library(ggpubr)
library(compareGroups)
library(DT)
library(plotly)
BiocManager::install("maftools")
#BiocManager::install("maftools")
library(maftools)
BiocManager::install("maftools")
install.packages("Rhtslib")
